import{_ as o,r as e,o as c,c as u,a as n,b as t,F as l,d as s,e as p}from"./app.6835b22f.js";const k={},i=n("h1",{id:"uprava-quickjs-na-import-funkcii-rustu-novy-sposob-uvazovania-o-rozsireni-krakenu",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#uprava-quickjs-na-import-funkcii-rustu-novy-sposob-uvazovania-o-rozsireni-krakenu","aria-hidden":"true"},"#"),s(" \xDAprava quickjs na import funkci\xED rustu - nov\xFD sp\xF4sob uva\u017Eovania o roz\u0161\xEDren\xED Krakenu")],-1),r=n("h2",{id:"ulozisko-kodu",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ulozisko-kodu","aria-hidden":"true"},"#"),s(" \xDAlo\u017Eisko k\xF3du")],-1),d={href:"https://github.com/rmw-lib/quickjs-rust",target:"_blank",rel:"noopener noreferrer"},m=s("github"),f={href:"https://gitee.com/rmw-link/quickjs-rust",target:"_blank",rel:"noopener noreferrer"},y=s("gitee"),_={href:"https://gitflic.ru/project/rmw-link/quickjs-rust",target:"_blank",rel:"noopener noreferrer"},w=s("gitflic"),g=n("h2",{id:"povod",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#povod","aria-hidden":"true"},"#"),s(" P\xF4vod")],-1),h={href:"https://openkraken.com",target:"_blank",rel:"noopener noreferrer"},b=s("Kraken"),v=s(" je vysoko v\xFDkonn\xE9 webov\xE9 vykres\u013Eovacie jadro zalo\u017Een\xE9 na adrese "),j=n("code",null,"Flutter",-1),x=s(", ktor\xE9 ako skriptovacie jadro pou\u017E\xEDva "),S={href:"https://github.com/openkraken/kraken/tree/main/bridge/third_party/quickjs",target:"_blank",rel:"noopener noreferrer"},q=s("quickjs"),J=s("."),V=n("p",null,[s("Chcel som nap\xEDsa\u0165 nejak\xE9 roz\u0161\xEDrenia pre Kraken pomocou "),n("code",null,"rust"),s(".")],-1),C=s("Kraken "),z={href:"https://openkraken.com/guide/advanced/custom-js-api",target:"_blank",rel:"noopener noreferrer"},N=s("podporuje z\xE1pis roz\u0161\xEDren\xED pomocou adresy "),E=n("code",null,"dart",-1),I=s(" ."),U=s("Pou\u017E\xEDvanie str\xE1nky "),D={href:"https://github.com/fzyzcjy/flutter_rust_bridge",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"flutter_rust_bridge",-1),O=s(),F=n("code",null,"rust",-1),L=s(" a "),M=n("code",null,"dart",-1),R=s("."),A=n("p",null,[s("Kombin\xE1ciou t\xFDchto dvoch bodov nie je \u0165a\u017Ek\xE9 nap\xEDsa\u0165 roz\u0161\xEDrenia Kraken pomocou str\xE1nky "),n("code",null,"rust"),s("."),n("br"),s(" V\xFDkonnostn\xE1 r\xE9\u017Eia tohto rie\u0161enia je v\u0161ak vysok\xE1, preto\u017Ee pri volan\xED adresy "),n("code",null,"dart"),s(" na adresu "),n("code",null,"rust"),s(" doch\xE1dza k zn\xED\u017Eeniu v\xFDkonu a pri volan\xED adresy "),n("code",null,"quickjs"),s(" na adresu "),n("code",null,"dart"),s(" k \u010Fal\u0161iemu zn\xED\u017Eeniu v\xFDkonu.")],-1),K=s("Na druhej strane, zatia\u013E \u010Do komunita "),P=n("code",null,"rust",-1),B=s(" m\xE1 "),Q={href:"https://github.com/DelSkayn/rquickjs",target:"_blank",rel:"noopener noreferrer"},W=n("code",null,"rquickjs",-1),G=s(" tak\xE9to volania kni\u017Enice "),H=n("code",null,"quickjs",-1),Z=s(" na adrese "),X=n("code",null,"rust",-1),Y=s("."),$=n("br",null,null,-1),nn=s(" Namiesto vlo\u017Eenia v\u0161ak volaj\xFA "),sn=n("code",null,"quickjs",-1),an=s(),tn=n("code",null,"quickjs",-1),pn=s(" a nedaj\xFA sa pou\u017Ei\u0165 na \u010Darovanie "),on=n("code",null,"quickjs",-1),en=s("."),cn=p(`<p>V tejto datab\xE1ze som implementoval nov\xE9 rie\u0161enie: priamo upravil zdrojov\xFD k\xF3d <code>quickjs</code> tak, aby podporoval roz\u0161\xEDrenie <code>rust</code>.</p><p>Ide o v\u0161eobecn\xE9 rie\u0161enie, ktor\xE9 mo\u017Eno pou\u017Ei\u0165 nielen na \xFApravu Krakenu, ale aj pre v\u0161etky frameworky a kni\u017Enice, ktor\xE9 obsahuj\xFA <code>quickjs</code>.</p><h2 id="ukazka" tabindex="-1"><a class="header-anchor" href="#ukazka" aria-hidden="true">#</a> Uk\xE1\u017Eka</h2><p>K\xF3d test.js je nasledovn\xFD :</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">try_run</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\u274C&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>stack<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> rust <span class="token keyword">from</span> <span class="token string">&#39;rust&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;export from rust :&quot;</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>rust<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span>
  fib<span class="token punctuation">,</span>
  sleep
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rust&#39;</span>

<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;begin sleep 2s&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;sleep done&#39;</span><span class="token punctuation">)</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fib(3) =&#39;</span><span class="token punctuation">,</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;try catch example :&quot;</span><span class="token punctuation">)</span>
  <span class="token function">try_run</span><span class="token punctuation">(</span>fib<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">try_run</span><span class="token punctuation">(</span>fib<span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>Spustite <code>./quickjs/qjs test.js</code>, v\xFDstup :</p><div class="language-text ext-text"><pre class="language-text"><code>export from rust : fib,sleep
begin sleep 2s
sleep done
fib(3) = 6
try catch example :
\u274C miss : args need 1 pass 0
    at fib (native)
    at try_run (test.js:8)
    at &lt;anonymous&gt; (test.js:27)

\u274C not number : args position 0
    at fib (native)
    at try_run (test.js:6)
    at &lt;anonymous&gt; (test.js:28)
</code></pre></div><h3 id="implementacia-fib-v-hrdzi" tabindex="-1"><a class="header-anchor" href="#implementacia-fib-v-hrdzi" aria-hidden="true">#</a> Implement\xE1cia fib v hrdzi</h3><p>Funkcia fib importovan\xE1 v js je z <code>rust/src/export/fib.rs</code> a k\xF3d je nasleduj\xFAci :</p><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>js<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> arg<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">rust_macro<span class="token punctuation">::</span></span>js<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>os<span class="token punctuation">::</span>raw<span class="token punctuation">::</span></span>c_int<span class="token punctuation">;</span>

<span class="token attribute attr-name">#[js]</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token keyword">i64</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i64</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  n <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[no_mangle]</span>
<span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> <span class="token keyword">fn</span> <span class="token function-definition function">js_fib</span><span class="token punctuation">(</span>
  ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span>
  _this<span class="token punctuation">:</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
  argc<span class="token punctuation">:</span> c_int<span class="token punctuation">,</span>
  argv<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">JSValue</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_miss</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> fib_args_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> err<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">match</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_i64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> err<span class="token punctuation">,</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token namespace">js<span class="token punctuation">::</span></span><span class="token function">val</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>V s\xFA\u010Dasnosti makro proced\xFAry <code>#[js]</code> len prid\xE1va kon\u0161tantu <code>fib_args_len</code>, ktor\xE1 identifikuje po\u010Det argumentov funkcie.</p><p>V bud\xFAcnosti bude mo\u017En\xE9 nap\xEDsa\u0165 makro proced\xFAry <code>./rust_macro</code>, ktor\xE9 umo\u017En\xED plne automatick\xFD export funkci\xED.</p><h3 id="implementacia-funkcie-sleep-v-jazyku-rust" tabindex="-1"><a class="header-anchor" href="#implementacia-funkcie-sleep-v-jazyku-rust" aria-hidden="true">#</a> Implement\xE1cia funkcie sleep v jazyku rust</h3><p>Funkcia sleep importovan\xE1 v js je z <code>rust/src/export/sleep.rs</code> a k\xF3d je nasledovn\xFD :</p><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>js<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> arg<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">rust_macro<span class="token punctuation">::</span></span>js<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>os<span class="token punctuation">::</span>raw<span class="token punctuation">::</span></span>c_int<span class="token punctuation">;</span>

<span class="token attribute attr-name">#[js]</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token keyword">i64</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i64</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  n <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[no_mangle]</span>
<span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> <span class="token keyword">fn</span> <span class="token function-definition function">js_fib</span><span class="token punctuation">(</span>
  ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span>
  _this<span class="token punctuation">:</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
  argc<span class="token punctuation">:</span> c_int<span class="token punctuation">,</span>
  argv<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">JSValue</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_miss</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> fib_args_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> err<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">match</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_i64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> err<span class="token punctuation">,</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token namespace">js<span class="token punctuation">::</span></span><span class="token function">val</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token punctuation">::</span><span class="token punctuation">{</span><span class="token namespace">js<span class="token punctuation">::</span></span>arg<span class="token punctuation">,</span> <span class="token namespace">qjs<span class="token punctuation">::</span></span>run<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">async_io<span class="token punctuation">::</span></span><span class="token class-name">Timer</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">rust_macro<span class="token punctuation">::</span></span>js<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">os<span class="token punctuation">::</span>raw<span class="token punctuation">::</span></span>c_int<span class="token punctuation">,</span> <span class="token namespace">time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token attribute attr-name">#[js]</span>
<span class="token keyword">pub</span> <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">sleep</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Timer</span><span class="token punctuation">::</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[no_mangle]</span>
<span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> <span class="token keyword">fn</span> <span class="token function-definition function">js_sleep</span><span class="token punctuation">(</span>
  ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span>
  _this<span class="token punctuation">:</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
  argc<span class="token punctuation">:</span> c_int<span class="token punctuation">,</span>
  argv<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">JSValue</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_miss</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> sleep_args_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> err<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">match</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_i64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> err<span class="token punctuation">,</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">run</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span>
      <span class="token function">sleep</span><span class="token punctuation">(</span>n <span class="token keyword">as</span> <span class="token keyword">u64</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
      <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Ako vid\xEDte vy\u0161\u0161ie, v\u0161etky exportovan\xE9 funkcie s\xFA definovan\xE9 v adres\xE1ri <code>./rust/src/export</code>. Tento adres\xE1r <code>mod.rs</code> sa automaticky vygeneruje pri spusten\xED <code>./rust/build.xsh</code>, pri\u010Dom sa do neho exportuj\xFA v\u0161etky s\xFAbory <code>.rs</code>.</p><h3 id="citanie-a-overovanie-prichodzich-parametrov-js" tabindex="-1"><a class="header-anchor" href="#citanie-a-overovanie-prichodzich-parametrov-js" aria-hidden="true">#</a> \u010C\xEDtanie a overovanie pr\xEDchodz\xEDch parametrov js</h3><p>Parametre sa na\u010D\xEDtaj\xFA a overuj\xFA na adrese <code>src/js/arg.rs</code> pomocou nasleduj\xFAceho k\xF3du :</p><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>js<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> arg<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">rust_macro<span class="token punctuation">::</span></span>js<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>os<span class="token punctuation">::</span>raw<span class="token punctuation">::</span></span>c_int<span class="token punctuation">;</span>

<span class="token attribute attr-name">#[js]</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token keyword">i64</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i64</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  n <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[no_mangle]</span>
<span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> <span class="token keyword">fn</span> <span class="token function-definition function">js_fib</span><span class="token punctuation">(</span>
  ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span>
  _this<span class="token punctuation">:</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
  argc<span class="token punctuation">:</span> c_int<span class="token punctuation">,</span>
  argv<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">JSValue</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_miss</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> fib_args_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> err<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">match</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_i64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> err<span class="token punctuation">,</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token namespace">js<span class="token punctuation">::</span></span><span class="token function">val</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token punctuation">::</span><span class="token punctuation">{</span><span class="token namespace">js<span class="token punctuation">::</span></span>arg<span class="token punctuation">,</span> <span class="token namespace">qjs<span class="token punctuation">::</span></span>run<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">async_io<span class="token punctuation">::</span></span><span class="token class-name">Timer</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">rust_macro<span class="token punctuation">::</span></span>js<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">os<span class="token punctuation">::</span>raw<span class="token punctuation">::</span></span>c_int<span class="token punctuation">,</span> <span class="token namespace">time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token attribute attr-name">#[js]</span>
<span class="token keyword">pub</span> <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">sleep</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Timer</span><span class="token punctuation">::</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[no_mangle]</span>
<span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> <span class="token keyword">fn</span> <span class="token function-definition function">js_sleep</span><span class="token punctuation">(</span>
  ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span>
  _this<span class="token punctuation">:</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
  argc<span class="token punctuation">:</span> c_int<span class="token punctuation">,</span>
  argv<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">JSValue</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_miss</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> sleep_args_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> err<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">match</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_i64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> err<span class="token punctuation">,</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">run</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span>
      <span class="token function">sleep</span><span class="token punctuation">(</span>n <span class="token keyword">as</span> <span class="token keyword">u64</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
      <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>js<span class="token punctuation">::</span></span>throw<span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span> <span class="token class-name">JS_IsNumber</span><span class="token punctuation">,</span> <span class="token class-name">JS_ToInt64</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token class-name">MaybeUninit</span><span class="token punctuation">,</span> <span class="token namespace">os<span class="token punctuation">::</span>raw<span class="token punctuation">::</span></span>c_int<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">arg_miss</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span> argc<span class="token punctuation">:</span> c_int<span class="token punctuation">,</span> need<span class="token punctuation">:</span> c_int<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> argc <span class="token operator">&lt;</span> need <span class="token punctuation">{</span>
    <span class="token function">throw</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;miss : args need {need} pass {argc}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">arg_i64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span> argv<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span> pos<span class="token punctuation">:</span> <span class="token keyword">isize</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">i64</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token operator">*</span>argv<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token class-name">JS_IsNumber</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
      <span class="token function">throw</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;not number : args position {pos}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> n <span class="token operator">=</span> <span class="token class-name">MaybeUninit</span><span class="token punctuation">::</span><span class="token function">uninit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">JS_ToInt64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> n<span class="token punctuation">.</span><span class="token function">as_mut_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> _<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">assume_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>V s\xFA\u010Dasnosti sa kontroluje len po\u010Det argumentov a \u010D\xEDta sa typ i64.</p>`,20),un=s("Tieto funkcie m\xF4\u017Eete prida\u0165 pod\u013Ea potreby, pozri funkcie v "),ln={href:"https://docs.rs/qjs-sys/0.1.2/qjs_sys/",target:"_blank",rel:"noopener noreferrer"},kn=s("qjs_sys"),rn=s(" za\u010D\xEDnaj\xFAce na "),dn=n("code",null,"JS_To",-1),mn=s("."),fn=p(`<h3 id="konverzia-datovych-typov-z-rustu-do-js" tabindex="-1"><a class="header-anchor" href="#konverzia-datovych-typov-z-rustu-do-js" aria-hidden="true">#</a> Konverzia d\xE1tov\xFDch typov z rustu do js</h3><p>Konverzia typu sa vykon\xE1va na adrese <code>src/js/val.rs</code> pomocou nasleduj\xFAceho k\xF3du :</p><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>js<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> arg<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">rust_macro<span class="token punctuation">::</span></span>js<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>os<span class="token punctuation">::</span>raw<span class="token punctuation">::</span></span>c_int<span class="token punctuation">;</span>

<span class="token attribute attr-name">#[js]</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token keyword">i64</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i64</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  n <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[no_mangle]</span>
<span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> <span class="token keyword">fn</span> <span class="token function-definition function">js_fib</span><span class="token punctuation">(</span>
  ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span>
  _this<span class="token punctuation">:</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
  argc<span class="token punctuation">:</span> c_int<span class="token punctuation">,</span>
  argv<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">JSValue</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_miss</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> fib_args_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> err<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">match</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_i64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> err<span class="token punctuation">,</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token namespace">js<span class="token punctuation">::</span></span><span class="token function">val</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token punctuation">::</span><span class="token punctuation">{</span><span class="token namespace">js<span class="token punctuation">::</span></span>arg<span class="token punctuation">,</span> <span class="token namespace">qjs<span class="token punctuation">::</span></span>run<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">async_io<span class="token punctuation">::</span></span><span class="token class-name">Timer</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">rust_macro<span class="token punctuation">::</span></span>js<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">os<span class="token punctuation">::</span>raw<span class="token punctuation">::</span></span>c_int<span class="token punctuation">,</span> <span class="token namespace">time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token attribute attr-name">#[js]</span>
<span class="token keyword">pub</span> <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">sleep</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Timer</span><span class="token punctuation">::</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[no_mangle]</span>
<span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> <span class="token keyword">fn</span> <span class="token function-definition function">js_sleep</span><span class="token punctuation">(</span>
  ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span>
  _this<span class="token punctuation">:</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
  argc<span class="token punctuation">:</span> c_int<span class="token punctuation">,</span>
  argv<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">JSValue</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_miss</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> sleep_args_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> err<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">match</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_i64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> err<span class="token punctuation">,</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">run</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span>
      <span class="token function">sleep</span><span class="token punctuation">(</span>n <span class="token keyword">as</span> <span class="token keyword">u64</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
      <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>js<span class="token punctuation">::</span></span>throw<span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span> <span class="token class-name">JS_IsNumber</span><span class="token punctuation">,</span> <span class="token class-name">JS_ToInt64</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token class-name">MaybeUninit</span><span class="token punctuation">,</span> <span class="token namespace">os<span class="token punctuation">::</span>raw<span class="token punctuation">::</span></span>c_int<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">arg_miss</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span> argc<span class="token punctuation">:</span> c_int<span class="token punctuation">,</span> need<span class="token punctuation">:</span> c_int<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> argc <span class="token operator">&lt;</span> need <span class="token punctuation">{</span>
    <span class="token function">throw</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;miss : args need {need} pass {argc}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">arg_i64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span> argv<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span> pos<span class="token punctuation">:</span> <span class="token keyword">isize</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">i64</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token operator">*</span>argv<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token class-name">JS_IsNumber</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
      <span class="token function">throw</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;not number : args position {pos}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> n <span class="token operator">=</span> <span class="token class-name">MaybeUninit</span><span class="token punctuation">::</span><span class="token function">uninit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">JS_ToInt64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> n<span class="token punctuation">.</span><span class="token function">as_mut_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> _<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">assume_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span> <span class="token class-name">JS_NewInt64</span><span class="token punctuation">,</span> <span class="token class-name">JS_NewString</span><span class="token punctuation">,</span> <span class="token constant">JS_NULL</span><span class="token punctuation">,</span> <span class="token constant">JS_UNDEFINED</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>ffi<span class="token punctuation">::</span></span><span class="token class-name">CString</span><span class="token punctuation">;</span>

<span class="token keyword">pub</span> <span class="token keyword">enum</span> <span class="token type-definition class-name">Val</span> <span class="token punctuation">{</span>
  <span class="token class-name">None</span><span class="token punctuation">,</span>
  <span class="token class-name">Undefined</span><span class="token punctuation">,</span>
  <span class="token constant">I64</span><span class="token punctuation">(</span><span class="token keyword">i64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token class-name">CString</span><span class="token punctuation">(</span><span class="token class-name">CString</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">From</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token class-name">Val</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">from</span><span class="token punctuation">(</span>_<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token class-name">Undefined</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">From</span><span class="token operator">&lt;</span><span class="token keyword">i64</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token class-name">Val</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">from</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token keyword">i64</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token constant">I64</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">From</span><span class="token operator">&lt;</span><span class="token class-name">CString</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token class-name">Val</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">from</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token class-name">CString</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token class-name">CString</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">val</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span> t<span class="token punctuation">:</span> <span class="token keyword">impl</span> <span class="token class-name">Into</span><span class="token operator">&lt;</span><span class="token class-name">Val</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">JSValue</span> <span class="token punctuation">{</span>
  <span class="token keyword">match</span> t<span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token constant">JS_NULL</span><span class="token punctuation">,</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token class-name">Undefined</span> <span class="token operator">=&gt;</span> <span class="token constant">JS_UNDEFINED</span><span class="token punctuation">,</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token constant">I64</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token class-name">JS_NewInt64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token class-name">CString</span><span class="token punctuation">(</span>cstr<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token class-name">JS_NewString</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cstr<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Pre konverziu z <code>None</code>, <code>()</code>, <code>i64</code>a CString na <code>js</code> s\xFA definovan\xE9 len \u0161tyri typy. M\xF4\u017Eete ich prida\u0165 \u013Eubovo\u013En\xFD po\u010Det.</p>`,4),yn=s("\u010Eal\u0161ie d\xE1tov\xE9 typy je mo\u017En\xE9 deklarova\u0165 vo funkci\xE1ch v "),_n={href:"https://docs.rs/qjs-sys/0.1.2/qjs_sys/",target:"_blank",rel:"noopener noreferrer"},wn=s("qjs_sys"),gn=s(" po\u010Dn\xFAc "),hn=n("code",null,"JS_New",-1),bn=s("."),vn=n("h2",{id:"vyvojove-prostredie",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vyvojove-prostredie","aria-hidden":"true"},"#"),s(" V\xFDvojov\xE9 prostredie")],-1),jn=n("p",null,"Vyv\xEDjam na notebooku Apple, rust pou\u017E\xEDva 1.62.0-nightly.",-1),xn=s("Najprv nain\u0161talujte "),Sn={href:"https://direnv.net",target:"_blank",rel:"noopener noreferrer"},qn=s("direnv"),Jn=s(", prejdite do adres\xE1ra a "),Vn=n("code",null,"direnv allow",-1),Cn=s(" na chv\xED\u013Eu"),zn=p(`<p>Nain\u0161talujte python3, potom <code>pip3 install -r ./requirements.txt</code></p><p>spusti\u0165 <code>./build.xsh</code> na kompil\xE1ciu a spustenie uk\xE1\u017Eky</p><p>V predvolenom nastaven\xED sa klonuje ofici\xE1lny repozit\xE1r quickjs, ak chcete upravi\u0165 quickjs v repozit\xE1ri Kraken, najprv</p><p><code>git clone --recursive git@github.com:openkraken/kraken.git --depth=1</code></p><p>potom vykonajte nasleduj\xFAce kroky</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">rm</span> -rf quickjs
<span class="token function">ln</span> -s <span class="token punctuation">..</span>/kraken/bridge/third_party/quickjs <span class="token builtin class-name">.</span>
</code></pre></div><p>Nakoniec znovu spustite <code>./build.xsh</code></p><h2 id="struktura-adresara" tabindex="-1"><a class="header-anchor" href="#struktura-adresara" aria-hidden="true">#</a> \u0160trukt\xFAra adres\xE1ra</h2>`,8),Nn=p("<li><p><code>./quickjs_rust</code><br> \xDAprava c-s\xFAboru k\xF3du quickjs</p></li><li><p><code>./quickjs_ffi</code><br> Export funkci\xED zo z\xE1hlavn\xE9ho s\xFAboru <code>quickjs</code> do <code>rust</code></p></li><li><p><code>./rust</code><br> Na implement\xE1ciu funkci\xED na str\xE1nke <code>quickjs</code> pou\u017Eite str\xE1nku <code>rust</code>.</p><ul><li><code>./rust/src/qjs.rs</code><br> Implement\xE1cia asynchr\xF3nnych volan\xED. Ke\u010F\u017Ee <code>quickjs</code> je jednovl\xE1knov\xFD, volania funkci\xED zah\u0155\u0148aj\xFAce <code>quckjs</code> sa zapisuj\xFA v hlavnom vl\xE1kne.</li></ul></li>",3),En=n("p",null,[n("code",null,"./rust_macro"),n("br"),n("code",null,"rust"),s(" Implement\xE1cia makra postupu "),n("code",null,"#[js]")],-1),In=s("V bud\xFAcnosti si pozrite "),Un={href:"https://github.com/second-state/wasmedge-quickjs/blob/70efe8520dc65636cb81b7225e2a6dae47cfad49/src/quickjs_sys/mod.rs#L122",target:"_blank",rel:"noopener noreferrer"},Dn=s("wasmedge-quickjs"),Tn=s(" pre automatick\xFD export rust funkci\xED do js funkci\xED. "),On={href:"https://github.com/second-state/wasmedge-quickjs/blob/70efe8520dc65636cb81b7225e2a6dae47cfad49/src/quickjs_sys/mod.rs#L122",target:"_blank",rel:"noopener noreferrer"},Fn=s("wasmedge-quickjs \u2192 JsFunctionTrampoline"),Ln=p(`<h2 id="stavebne-skripty-build-xsh" tabindex="-1"><a class="header-anchor" href="#stavebne-skripty-build-xsh" aria-hidden="true">#</a> Stavebn\xE9 skripty <code>build.xsh</code></h2><p>Bez \u010Fal\u0161\xEDch slov prejdime priamo k zdrojov\xE9mu k\xF3du zostavovacieho skriptu <code>build.xsh</code></p><div class="language-xonsh ext-xonsh"><pre class="language-xonsh"><code>#!/usr/bin/env xonsh

from pathlib import Path
from os.path import dirname,abspath,exists,join
PWD = dirname(abspath(__file__))
cd @(PWD)

p&quot;.xonshrc&quot;.exists() &amp;&amp; source .xonshrc

quickjs = &#39;quickjs&#39;

if not exists(quickjs):
  git clone git@github.com:bellard/@(quickjs).git --depth=1

./quickjs_rust/patch.py

./rust/build.xsh
./quickjs_rust/gen.py

def ln_s(li):
  for arg in li.split(&#39; &#39;):
    fp = join(quickjs,arg)
    if not exists(fp):
      ln -s @(PWD)/@(arg) @(fp)

ln_s(&#39;quickjs_rust rust quickjs_ffi rust_macro&#39;)

cd @(quickjs)
make qjs

cd @(PWD)
./quickjs/qjs --unhandled-rejection -m test.js 2&gt;&amp;1 | tee test.js.out
</code></pre></div><h2 id="vysvetlenie-principu" tabindex="-1"><a class="header-anchor" href="#vysvetlenie-principu" aria-hidden="true">#</a> Vysvetlenie princ\xEDpu</h2><h3 id="quickjs-rust-patch-py" tabindex="-1"><a class="header-anchor" href="#quickjs-rust-patch-py" aria-hidden="true">#</a> <code>quickjs_rust/patch.py</code></h3><p>Spusten\xEDm str\xE1nky <code>./quickjs_rust/patch.py</code> sa v zdrojovom k\xF3de str\xE1nky <code>quickjs</code> vykon\xE1 nieko\u013Eko men\u0161\xEDch zmien.</p><p>Jedna z funkci\xED <code>JS_AddRust</code> sa pou\u017E\xEDva na injektovanie do modulu rust.</p><p><code>rust_run</code> sa vklad\xE1 do str\xE1nky <code>JS_ExecutePendingJob</code> na volanie asynchr\xF3nnych funkci\xED.</p><p>Sn\xEDmka obrazovky so v\u0161etk\xFDmi zmenami je uveden\xE1 ni\u017E\u0161ie :</p><p><img src="//irmw.gumlet.io/ep2Xgg.png" alt=""></p><h3 id="quickjs-rust-h" tabindex="-1"><a class="header-anchor" href="#quickjs-rust-h" aria-hidden="true">#</a> <code>quickjs_rust.h</code></h3><p>Z uveden\xFDch zmien vid\xEDte, \u017Ee sme zaviedli nov\xFD hlavi\u010Dkov\xFD s\xFAbor <code>quickjs_rust.h</code> s nasleduj\xFAcim k\xF3dom</p><div class="language-c ext-c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">QUICKJS_RUST_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">QUICKJS_RUST_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;../quickjs/quickjs.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;../rust/rust.h&quot;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">countof</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">JS_RUSTFUNC_DEF</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token function">JS_CFUNC_DEF</span><span class="token punctuation">(</span>#name<span class="token punctuation">,</span> name</span><span class="token punctuation">##</span><span class="token expression">_args_len<span class="token punctuation">,</span> js_</span><span class="token punctuation">##</span><span class="token expression">name<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;./js_rust_funcs.h&quot;</span></span>

<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> js_rust_funcs_count <span class="token operator">=</span> <span class="token function">countof</span><span class="token punctuation">(</span>js_rust_funcs<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">int</span>
<span class="token function">js_rust_init</span><span class="token punctuation">(</span>JSContext<span class="token operator">*</span> ctx<span class="token punctuation">,</span> JSModuleDef<span class="token operator">*</span> m<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">JS_SetModuleExportList</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> m<span class="token punctuation">,</span> js_rust_funcs<span class="token punctuation">,</span>
      js_rust_funcs_count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">JS_INIT_MODULE</span> <span class="token expression">js_init_module_rust</span></span>

JSModuleDef<span class="token operator">*</span> <span class="token function">JS_INIT_MODULE</span><span class="token punctuation">(</span>JSContext<span class="token operator">*</span> ctx<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> module_name<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  JSModuleDef<span class="token operator">*</span> m<span class="token punctuation">;</span>
  m <span class="token operator">=</span> <span class="token function">JS_NewCModule</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> module_name<span class="token punctuation">,</span> js_rust_init<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token function">js_rust_init</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> m<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">JS_AddRust</span><span class="token punctuation">(</span>JSContext<span class="token operator">*</span> ctx<span class="token punctuation">,</span> JSRuntime<span class="token operator">*</span> rt<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  JSModuleDef<span class="token operator">*</span> m <span class="token operator">=</span> <span class="token function">JS_INIT_MODULE</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">&quot;rust&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> js_rust_funcs_count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">JS_AddModuleExport</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> m<span class="token punctuation">,</span> js_rust_funcs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">rust_init</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> rt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre></div><h3 id="rust-rust-h" tabindex="-1"><a class="header-anchor" href="#rust-rust-h" aria-hidden="true">#</a> <code>rust/rust.h</code></h3><p>Vid\xEDte, \u017Ee <code>quickjs_rust/quickjs_rust.h</code> zav\xE1dza <code>quickjs_rust/js_rust_funcs.h</code>, ktor\xFD je automaticky generovan\xFD zo s\xFAboru hlavi\u010Dky exportnej funkcie rust <code>rust/rust.h</code> a nemal by sa ru\u010Dne upravova\u0165.</p><p>A str\xE1nka <code>rust/rust.h</code> sa generuje volan\xEDm cbindgen zo str\xE1nky <code>./rust/build.xsh</code>.</p><h3 id="rust-build-xsh" tabindex="-1"><a class="header-anchor" href="#rust-build-xsh" aria-hidden="true">#</a> <code>rust/build.xsh</code></h3><div class="language-xonsh ext-xonsh"><pre class="language-xonsh"><code>#!/usr/bin/env xonsh

from os.path import dirname,abspath
import platform
PWD = dirname(abspath(__file__))
cd @(PWD)

p&quot;../.xonshrc&quot;.exists() &amp;&amp; source ../.xonshrc

./src/export/mod.gen.py

system = platform.system().lower()
if system == &#39;darwin&#39;:
  system = f&#39;apple-{system}&#39;

TARGET=f&#39;{platform.machine()}-{system}&#39;

def cbindgen():
  cbindgen -q --config cbindgen.toml --crate rust --output rust.h

try:
  cbindgen()
except:
  cargo clean
  cbindgen()

cargo build \\
--release \\
-Z build-std=std,panic_abort \\
-Z build-std-features=panic_immediate_abort \\
--target @(TARGET)

mv ./target/@(TARGET)/release/librust.a ./target/release
</code></pre></div><h2 id="problemy-s-vyvojom-memo" tabindex="-1"><a class="header-anchor" href="#problemy-s-vyvojom-memo" aria-hidden="true">#</a> Probl\xE9my s v\xFDvojom : Memo</h2><h3 id="quickjs-ffi" tabindex="-1"><a class="header-anchor" href="#quickjs-ffi" aria-hidden="true">#</a> <code>quickjs_ffi</code></h3>`,20),Mn=s("K\xF3d z "),Rn={href:"https://raw.githubusercontent.com/taskie/quijine/main/quijine_core/src/ffi.rs",target:"_blank",rel:"noopener noreferrer"},An=s("quijine/main/quijine_core/src/ffi.rs"),Kn=p(`<p>s mal\xFDmi \xFApravami, nahraden\xEDm</p><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>js<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> arg<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">rust_macro<span class="token punctuation">::</span></span>js<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>os<span class="token punctuation">::</span>raw<span class="token punctuation">::</span></span>c_int<span class="token punctuation">;</span>

<span class="token attribute attr-name">#[js]</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token keyword">i64</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i64</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  n <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[no_mangle]</span>
<span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> <span class="token keyword">fn</span> <span class="token function-definition function">js_fib</span><span class="token punctuation">(</span>
  ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span>
  _this<span class="token punctuation">:</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
  argc<span class="token punctuation">:</span> c_int<span class="token punctuation">,</span>
  argv<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">JSValue</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_miss</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> fib_args_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> err<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">match</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_i64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> err<span class="token punctuation">,</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token namespace">js<span class="token punctuation">::</span></span><span class="token function">val</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token punctuation">::</span><span class="token punctuation">{</span><span class="token namespace">js<span class="token punctuation">::</span></span>arg<span class="token punctuation">,</span> <span class="token namespace">qjs<span class="token punctuation">::</span></span>run<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">async_io<span class="token punctuation">::</span></span><span class="token class-name">Timer</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">rust_macro<span class="token punctuation">::</span></span>js<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">os<span class="token punctuation">::</span>raw<span class="token punctuation">::</span></span>c_int<span class="token punctuation">,</span> <span class="token namespace">time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token attribute attr-name">#[js]</span>
<span class="token keyword">pub</span> <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">sleep</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Timer</span><span class="token punctuation">::</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[no_mangle]</span>
<span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> <span class="token keyword">fn</span> <span class="token function-definition function">js_sleep</span><span class="token punctuation">(</span>
  ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span>
  _this<span class="token punctuation">:</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
  argc<span class="token punctuation">:</span> c_int<span class="token punctuation">,</span>
  argv<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">JSValue</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_miss</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> sleep_args_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> err<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">match</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_i64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> err<span class="token punctuation">,</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">run</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span>
      <span class="token function">sleep</span><span class="token punctuation">(</span>n <span class="token keyword">as</span> <span class="token keyword">u64</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
      <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>js<span class="token punctuation">::</span></span>throw<span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span> <span class="token class-name">JS_IsNumber</span><span class="token punctuation">,</span> <span class="token class-name">JS_ToInt64</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token class-name">MaybeUninit</span><span class="token punctuation">,</span> <span class="token namespace">os<span class="token punctuation">::</span>raw<span class="token punctuation">::</span></span>c_int<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">arg_miss</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span> argc<span class="token punctuation">:</span> c_int<span class="token punctuation">,</span> need<span class="token punctuation">:</span> c_int<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> argc <span class="token operator">&lt;</span> need <span class="token punctuation">{</span>
    <span class="token function">throw</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;miss : args need {need} pass {argc}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">arg_i64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span> argv<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span> pos<span class="token punctuation">:</span> <span class="token keyword">isize</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">i64</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token operator">*</span>argv<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token class-name">JS_IsNumber</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
      <span class="token function">throw</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;not number : args position {pos}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> n <span class="token operator">=</span> <span class="token class-name">MaybeUninit</span><span class="token punctuation">::</span><span class="token function">uninit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">JS_ToInt64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> n<span class="token punctuation">.</span><span class="token function">as_mut_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> _<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">assume_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span> <span class="token class-name">JS_NewInt64</span><span class="token punctuation">,</span> <span class="token class-name">JS_NewString</span><span class="token punctuation">,</span> <span class="token constant">JS_NULL</span><span class="token punctuation">,</span> <span class="token constant">JS_UNDEFINED</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>ffi<span class="token punctuation">::</span></span><span class="token class-name">CString</span><span class="token punctuation">;</span>

<span class="token keyword">pub</span> <span class="token keyword">enum</span> <span class="token type-definition class-name">Val</span> <span class="token punctuation">{</span>
  <span class="token class-name">None</span><span class="token punctuation">,</span>
  <span class="token class-name">Undefined</span><span class="token punctuation">,</span>
  <span class="token constant">I64</span><span class="token punctuation">(</span><span class="token keyword">i64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token class-name">CString</span><span class="token punctuation">(</span><span class="token class-name">CString</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">From</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token class-name">Val</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">from</span><span class="token punctuation">(</span>_<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token class-name">Undefined</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">From</span><span class="token operator">&lt;</span><span class="token keyword">i64</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token class-name">Val</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">from</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token keyword">i64</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token constant">I64</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">From</span><span class="token operator">&lt;</span><span class="token class-name">CString</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token class-name">Val</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">from</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token class-name">CString</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token class-name">CString</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">val</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span> t<span class="token punctuation">:</span> <span class="token keyword">impl</span> <span class="token class-name">Into</span><span class="token operator">&lt;</span><span class="token class-name">Val</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">JSValue</span> <span class="token punctuation">{</span>
  <span class="token keyword">match</span> t<span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token constant">JS_NULL</span><span class="token punctuation">,</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token class-name">Undefined</span> <span class="token operator">=&gt;</span> <span class="token constant">JS_UNDEFINED</span><span class="token punctuation">,</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token constant">I64</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token class-name">JS_NewInt64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token class-name">CString</span><span class="token punctuation">(</span>cstr<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token class-name">JS_NewString</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cstr<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">pub</span> <span class="token keyword">use</span> <span class="token namespace">libquickjs_sys<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
</code></pre></div><p>na</p><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>js<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> arg<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">rust_macro<span class="token punctuation">::</span></span>js<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>os<span class="token punctuation">::</span>raw<span class="token punctuation">::</span></span>c_int<span class="token punctuation">;</span>

<span class="token attribute attr-name">#[js]</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token keyword">i64</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i64</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  n <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[no_mangle]</span>
<span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> <span class="token keyword">fn</span> <span class="token function-definition function">js_fib</span><span class="token punctuation">(</span>
  ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span>
  _this<span class="token punctuation">:</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
  argc<span class="token punctuation">:</span> c_int<span class="token punctuation">,</span>
  argv<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">JSValue</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_miss</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> fib_args_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> err<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">match</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_i64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> err<span class="token punctuation">,</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token namespace">js<span class="token punctuation">::</span></span><span class="token function">val</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token punctuation">::</span><span class="token punctuation">{</span><span class="token namespace">js<span class="token punctuation">::</span></span>arg<span class="token punctuation">,</span> <span class="token namespace">qjs<span class="token punctuation">::</span></span>run<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">async_io<span class="token punctuation">::</span></span><span class="token class-name">Timer</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">rust_macro<span class="token punctuation">::</span></span>js<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">os<span class="token punctuation">::</span>raw<span class="token punctuation">::</span></span>c_int<span class="token punctuation">,</span> <span class="token namespace">time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token attribute attr-name">#[js]</span>
<span class="token keyword">pub</span> <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">sleep</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Timer</span><span class="token punctuation">::</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[no_mangle]</span>
<span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> <span class="token keyword">fn</span> <span class="token function-definition function">js_sleep</span><span class="token punctuation">(</span>
  ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span>
  _this<span class="token punctuation">:</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
  argc<span class="token punctuation">:</span> c_int<span class="token punctuation">,</span>
  argv<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">JSValue</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_miss</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> sleep_args_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> err<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">match</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_i64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> err<span class="token punctuation">,</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">run</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span>
      <span class="token function">sleep</span><span class="token punctuation">(</span>n <span class="token keyword">as</span> <span class="token keyword">u64</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
      <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>js<span class="token punctuation">::</span></span>throw<span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span> <span class="token class-name">JS_IsNumber</span><span class="token punctuation">,</span> <span class="token class-name">JS_ToInt64</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token class-name">MaybeUninit</span><span class="token punctuation">,</span> <span class="token namespace">os<span class="token punctuation">::</span>raw<span class="token punctuation">::</span></span>c_int<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">arg_miss</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span> argc<span class="token punctuation">:</span> c_int<span class="token punctuation">,</span> need<span class="token punctuation">:</span> c_int<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> argc <span class="token operator">&lt;</span> need <span class="token punctuation">{</span>
    <span class="token function">throw</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;miss : args need {need} pass {argc}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">arg_i64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span> argv<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span> pos<span class="token punctuation">:</span> <span class="token keyword">isize</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">i64</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token operator">*</span>argv<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token class-name">JS_IsNumber</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
      <span class="token function">throw</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;not number : args position {pos}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> n <span class="token operator">=</span> <span class="token class-name">MaybeUninit</span><span class="token punctuation">::</span><span class="token function">uninit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">JS_ToInt64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> n<span class="token punctuation">.</span><span class="token function">as_mut_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> _<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">assume_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span> <span class="token class-name">JS_NewInt64</span><span class="token punctuation">,</span> <span class="token class-name">JS_NewString</span><span class="token punctuation">,</span> <span class="token constant">JS_NULL</span><span class="token punctuation">,</span> <span class="token constant">JS_UNDEFINED</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>ffi<span class="token punctuation">::</span></span><span class="token class-name">CString</span><span class="token punctuation">;</span>

<span class="token keyword">pub</span> <span class="token keyword">enum</span> <span class="token type-definition class-name">Val</span> <span class="token punctuation">{</span>
  <span class="token class-name">None</span><span class="token punctuation">,</span>
  <span class="token class-name">Undefined</span><span class="token punctuation">,</span>
  <span class="token constant">I64</span><span class="token punctuation">(</span><span class="token keyword">i64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token class-name">CString</span><span class="token punctuation">(</span><span class="token class-name">CString</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">From</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token class-name">Val</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">from</span><span class="token punctuation">(</span>_<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token class-name">Undefined</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">From</span><span class="token operator">&lt;</span><span class="token keyword">i64</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token class-name">Val</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">from</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token keyword">i64</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token constant">I64</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">From</span><span class="token operator">&lt;</span><span class="token class-name">CString</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token class-name">Val</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">from</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token class-name">CString</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token class-name">CString</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">val</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span> t<span class="token punctuation">:</span> <span class="token keyword">impl</span> <span class="token class-name">Into</span><span class="token operator">&lt;</span><span class="token class-name">Val</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">JSValue</span> <span class="token punctuation">{</span>
  <span class="token keyword">match</span> t<span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token constant">JS_NULL</span><span class="token punctuation">,</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token class-name">Undefined</span> <span class="token operator">=&gt;</span> <span class="token constant">JS_UNDEFINED</span><span class="token punctuation">,</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token constant">I64</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token class-name">JS_NewInt64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token class-name">CString</span><span class="token punctuation">(</span>cstr<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token class-name">JS_NewString</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cstr<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">pub</span> <span class="token keyword">use</span> <span class="token namespace">libquickjs_sys<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token attribute attr-name">#![allow(non_upper_case_globals)]</span>
<span class="token attribute attr-name">#![allow(non_camel_case_types)]</span>
<span class="token attribute attr-name">#![allow(non_snake_case)]</span>

<span class="token macro property">include!</span><span class="token punctuation">(</span><span class="token macro property">concat!</span><span class="token punctuation">(</span><span class="token macro property">env!</span><span class="token punctuation">(</span><span class="token string">&quot;OUT_DIR&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;/c.rs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="undefined-symbols-for-architecture-x86-64-js-toint32" tabindex="-1"><a class="header-anchor" href="#undefined-symbols-for-architecture-x86-64-js-toint32" aria-hidden="true">#</a> <code>Undefined symbols for architecture x86_64: &quot;_JS_ToInt32&quot;</code></h3><p>Upravi\u0165 &quot;. /rust/Cargo.toml&#39; takto, pri\u010Dom sa zachov\xE1 len staticlib</p><div class="language-toml ext-toml"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">lib</span><span class="token punctuation">]</span>
<span class="token comment">#crate-type = [&quot;lib&quot;, &quot;cdylib&quot;, &quot;staticlib&quot;]</span>
<span class="token key property">crate-type</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;staticlib&quot;</span><span class="token punctuation">]</span>
</code></pre></div><h2 id="odkazy" tabindex="-1"><a class="header-anchor" href="#odkazy" aria-hidden="true">#</a> Odkazy</h2>`,8),Pn={start:"0"},Bn=s("Od motora "),Qn=n("code",null,"JS",-1),Wn=s(" k runtime "),Gn=n("code",null,"JS",-1),Hn=s(),Zn={href:"https://github.com/doodlewind/blog/blob/master/source/_posts/js-engine-to-js-runtime-1.md",target:"_blank",rel:"noopener noreferrer"},Xn=s("(hore"),Yn=s(" ) "),$n={href:"https://github.com/doodlewind/blog/blob/master/source/_posts/js-engine-to-js-runtime-2.md",target:"_blank",rel:"noopener noreferrer"},ns=s("(dole)"),ss={href:"https://github.com/quickjs-zh/QuickJS/wiki/%E4%BD%BF%E7%94%A8C%E8%AF%AD%E8%A8%80%E4%B8%BAQuickJS%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97",target:"_blank",rel:"noopener noreferrer"},as=s("V\xFDvoj nat\xEDvneho modulu pre "),ts=n("code",null,"QuickJS",-1),ps=s(" v jazyku C"),os={href:"https://wasmedge.org/book/en/dev/js/rust.html",target:"_blank",rel:"noopener noreferrer"},es=s("Pou\u017Eitie Rustu na implement\xE1ciu rozhrania JS API"),cs={href:"https://github.com/Kozova1/quickjs-example",target:"_blank",rel:"noopener noreferrer"},us=s("Pr\xEDklady QuickJS"),ls={href:"https://rust-lang.github.io/rust-bindgen/",target:"_blank",rel:"noopener noreferrer"},ks=s("rust-bindgen"),is={href:"https://calbertts.medium.com/how-to-create-asynchronous-apis-for-quickjs-8aca5488bb2e",target:"_blank",rel:"noopener noreferrer"},rs=s("Ako vytvori\u0165 asynchr\xF3nny k\xF3d pre "),ds=n("code",null,"QuickJS",-1),ms={href:"https://github.com/DelSkayn/rquickjs/blob/master/core/src/context/ctx.rs#L104",target:"_blank",rel:"noopener noreferrer"},fs=s("rquickjs \u2192 JS_NewPromiseCapability"),ys={href:"https://github.com/second-state/wasmedge-quickjs/blob/8a65582265ecdd3171380feebf56b3bb8c34d183/src/quickjs_sys/mod.rs#L515",target:"_blank",rel:"noopener noreferrer"},_s=s("wasmedge-quickjs \u2192 new_promise"),ws={href:"https://github.com/second-state/wasmedge-quickjs/blob/da887752fdc9c36aca0f4b7499c5b115862ce771/src/internal_module/wasi_net_module.rs#L46",target:"_blank",rel:"noopener noreferrer"},gs=s("wasmedge-quickjs \u2192 JsMethod"),hs={href:"https://github.com/second-state/wasmedge-quickjs/blob/8a65582265ecdd3171380feebf56b3bb8c34d183/src/quickjs_sys/mod.rs#L756",target:"_blank",rel:"noopener noreferrer"},bs=s("wasmedge-quickjs \u2192 volanie"),vs={href:"https://mp.weixin.qq.com/s/BKto24ItwXbeHon_LaF_0w",target:"_blank",rel:"noopener noreferrer"},js=s("Nepostrehnute\u013En\xE1 pasca - z\xE1mky Rust"),xs=n("h2",{id:"o-stranke",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#o-stranke","aria-hidden":"true"},"#"),s(" O str\xE1nke")],-1),Ss=s("Tento projekt je s\xFA\u010Das\u0165ou projektu k\xF3du "),qs=s("rmw.link ( "),Js={href:"//rmw.link",target:"_blank",rel:"noopener noreferrer"},Vs=s("rmw.link"),Cs=s(" )."),zs=n("p",null,[n("img",{src:"https://raw.githubusercontent.com/rmw-link/logo/master/rmw.red.bg.svg",alt:"rmw.link"})],-1);function Ns(Es,Is){const a=e("ExternalLinkIcon");return c(),u(l,null,[i,r,n("ul",null,[n("li",null,[n("a",d,[m,t(a)])]),n("li",null,[n("a",f,[y,t(a)])]),n("li",null,[n("a",_,[w,t(a)])])]),g,n("p",null,[n("a",h,[b,t(a)]),v,j,x,n("a",S,[q,t(a)]),J]),V,n("p",null,[C,n("a",z,[N,E,t(a)]),I]),n("p",null,[U,n("a",D,[T,t(a)]),O,F,L,M,R]),A,n("p",null,[K,P,B,n("a",Q,[W,t(a)]),G,H,Z,X,Y,$,nn,sn,an,tn,pn,on,en]),cn,n("p",null,[un,n("a",ln,[kn,t(a)]),rn,dn,mn]),fn,n("p",null,[yn,n("a",_n,[wn,t(a)]),gn,hn,bn]),vn,jn,n("p",null,[xn,n("a",Sn,[qn,t(a)]),Jn,Vn,Cn]),zn,n("ul",null,[Nn,n("li",null,[En,n("p",null,[In,n("a",Un,[Dn,t(a)]),Tn,n("a",On,[Fn,t(a)])])])]),Ln,n("p",null,[Mn,n("a",Rn,[An,t(a)])]),Kn,n("ol",Pn,[n("li",null,[Bn,Qn,Wn,Gn,Hn,n("a",Zn,[Xn,t(a)]),Yn,n("a",$n,[ns,t(a)])]),n("li",null,[n("a",ss,[as,ts,ps,t(a)])]),n("li",null,[n("a",os,[es,t(a)])]),n("li",null,[n("a",cs,[us,t(a)])]),n("li",null,[n("a",ls,[ks,t(a)])]),n("li",null,[n("a",is,[rs,ds,t(a)])]),n("li",null,[n("a",ms,[fs,t(a)])]),n("li",null,[n("a",ys,[_s,t(a)])]),n("li",null,[n("a",ws,[gs,t(a)])]),n("li",null,[n("a",hs,[bs,t(a)])]),n("li",null,[n("a",vs,[js,t(a)])])]),xs,n("p",null,[Ss,n("strong",null,[qs,n("a",Js,[Vs,t(a)])]),Cs]),zs],64)}var Ds=o(k,[["render",Ns],["__file","2022-04-29-quickjs-rust.html.vue"]]);export{Ds as default};
