import{_ as o,r as e,o as c,c as u,a as n,b as t,F as l,d as s,e as p}from"./app.6835b22f.js";const k={},i=n("h1",{id:"\xE6ndring-af-quickjs-til-at-importere-rustfunktioner-en-ny-made-at-t\xE6nke-pa-at-udvide-kraken-pa",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\xE6ndring-af-quickjs-til-at-importere-rustfunktioner-en-ny-made-at-t\xE6nke-pa-at-udvide-kraken-pa","aria-hidden":"true"},"#"),s(" \xC6ndring af quickjs til at importere rustfunktioner - en ny m\xE5de at t\xE6nke p\xE5 at udvide Kraken p\xE5")],-1),r=n("h2",{id:"kodeopbevaring",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#kodeopbevaring","aria-hidden":"true"},"#"),s(" Kodeopbevaring")],-1),d={href:"https://github.com/rmw-lib/quickjs-rust",target:"_blank",rel:"noopener noreferrer"},m=s("github"),f={href:"https://gitee.com/rmw-link/quickjs-rust",target:"_blank",rel:"noopener noreferrer"},_=s("gitee"),g={href:"https://gitflic.ru/project/rmw-link/quickjs-rust",target:"_blank",rel:"noopener noreferrer"},y=s("gitflic"),w=n("h2",{id:"oprindelse",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#oprindelse","aria-hidden":"true"},"#"),s(" Oprindelse")],-1),h={href:"https://openkraken.com",target:"_blank",rel:"noopener noreferrer"},b=s("Kraken"),j=s(" er en h\xF8jtydende webrenderingsmotor baseret p\xE5 "),x=n("code",null,"Flutter",-1),S=s(", som bruger "),q={href:"https://github.com/openkraken/kraken/tree/main/bridge/third_party/quickjs",target:"_blank",rel:"noopener noreferrer"},J=s("quickjs"),v=s(" som scriptingmotor."),V=n("p",null,[s("Jeg \xF8nskede at skrive nogle udvidelser til Kraken ved hj\xE6lp af "),n("code",null,"rust"),s(".")],-1),C=s("Kraken "),E={href:"https://openkraken.com/guide/advanced/custom-js-api",target:"_blank",rel:"noopener noreferrer"},I=s("underst\xF8tter skrivning af udvidelser ved hj\xE6lp af "),N=n("code",null,"dart",-1),D=s(" ."),U=s("Brug af "),T={href:"https://github.com/fzyzcjy/flutter_rust_bridge",target:"_blank",rel:"noopener noreferrer"},F=n("code",null,"flutter_rust_bridge",-1),O=s(),L=n("code",null,"rust",-1),R=s(" og "),M=n("code",null,"dart",-1),A=s("."),K=n("p",null,[s("Hvis man kombinerer disse to punkter, er det ikke sv\xE6rt at skrive Kraken-udvidelser ved hj\xE6lp af "),n("code",null,"rust"),s("."),n("br"),s(" Denne l\xF8sning har dog et stort overhead i forhold til ydelsen, da der er en ydelsesm\xE6ssig straf for "),n("code",null,"dart"),s(", der kalder "),n("code",null,"rust"),s(", og en anden for "),n("code",null,"quickjs"),s(", der kalder "),n("code",null,"dart"),s(".")],-1),B=s("P\xE5 den anden side, mens "),P=n("code",null,"rust",-1),z=s(" har "),Q={href:"https://github.com/DelSkayn/rquickjs",target:"_blank",rel:"noopener noreferrer"},W=n("code",null,"rquickjs",-1),G=s(" s\xE5danne kald til biblioteket "),H=n("code",null,"quickjs",-1),X=s(" p\xE5 "),Z=n("code",null,"rust",-1),Y=s("."),$=n("br",null,null,-1),nn=s(" De kalder dog "),sn=n("code",null,"quickjs",-1),an=s(" i stedet for at indlejre "),tn=n("code",null,"quickjs",-1),pn=s("og kan ikke bruges til at trylle "),on=n("code",null,"quickjs",-1),en=s("."),cn=p(`<p>I denne kodebase har jeg implementeret en ny l\xF8sning: direkte \xE6ndring af kildekoden til <code>quickjs</code> for at underst\xF8tte udvidelsen <code>rust</code>.</p><p>Dette er en generisk l\xF8sning, som ikke kun kan bruges til at \xE6ndre Kraken, men ogs\xE5 til alle rammer og biblioteker, der indlejrer <code>quickjs</code>.</p><h2 id="demonstration" tabindex="-1"><a class="header-anchor" href="#demonstration" aria-hidden="true">#</a> Demonstration</h2><p>Koden til test.js er som f\xF8lger :</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">try_run</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\u274C&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>stack<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> rust <span class="token keyword">from</span> <span class="token string">&#39;rust&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;export from rust :&quot;</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>rust<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span>
  fib<span class="token punctuation">,</span>
  sleep
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rust&#39;</span>

<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;begin sleep 2s&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;sleep done&#39;</span><span class="token punctuation">)</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fib(3) =&#39;</span><span class="token punctuation">,</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;try catch example :&quot;</span><span class="token punctuation">)</span>
  <span class="token function">try_run</span><span class="token punctuation">(</span>fib<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">try_run</span><span class="token punctuation">(</span>fib<span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>K\xF8r <code>./quickjs/qjs test.js</code>, output :</p><div class="language-text ext-text"><pre class="language-text"><code>export from rust : fib,sleep
begin sleep 2s
sleep done
fib(3) = 6
try catch example :
\u274C miss : args need 1 pass 0
    at fib (native)
    at try_run (test.js:8)
    at &lt;anonymous&gt; (test.js:27)

\u274C not number : args position 0
    at fib (native)
    at try_run (test.js:6)
    at &lt;anonymous&gt; (test.js:28)
</code></pre></div><h3 id="implementering-af-fib-i-rust" tabindex="-1"><a class="header-anchor" href="#implementering-af-fib-i-rust" aria-hidden="true">#</a> Implementering af fib i rust</h3><p>Fib-funktionen, der er importeret i js, er fra <code>rust/src/export/fib.rs</code>, og koden er som f\xF8lger :</p><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>js<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> arg<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">rust_macro<span class="token punctuation">::</span></span>js<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>os<span class="token punctuation">::</span>raw<span class="token punctuation">::</span></span>c_int<span class="token punctuation">;</span>

<span class="token attribute attr-name">#[js]</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token keyword">i64</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i64</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  n <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[no_mangle]</span>
<span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> <span class="token keyword">fn</span> <span class="token function-definition function">js_fib</span><span class="token punctuation">(</span>
  ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span>
  _this<span class="token punctuation">:</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
  argc<span class="token punctuation">:</span> c_int<span class="token punctuation">,</span>
  argv<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">JSValue</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_miss</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> fib_args_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> err<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">match</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_i64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> err<span class="token punctuation">,</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token namespace">js<span class="token punctuation">::</span></span><span class="token function">val</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>I \xF8jeblikket tilf\xF8jer proceduremakroen <code>#[js]</code> blot en konstant <code>fib_args_len</code>, der angiver antallet af argumenter til funktionen.</p><p>I fremtiden kan proceduremakroen <code>./rust_macro</code> skrives for at muligg\xF8re fuldautomatisk funktionseksport.</p><h3 id="implementering-af-sleep-funktionen-i-rust" tabindex="-1"><a class="header-anchor" href="#implementering-af-sleep-funktionen-i-rust" aria-hidden="true">#</a> Implementering af sleep-funktionen i rust</h3><p>Sleep-funktionen, der er importeret i js, er fra <code>rust/src/export/sleep.rs</code>, og koden er som f\xF8lger :</p><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>js<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> arg<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">rust_macro<span class="token punctuation">::</span></span>js<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>os<span class="token punctuation">::</span>raw<span class="token punctuation">::</span></span>c_int<span class="token punctuation">;</span>

<span class="token attribute attr-name">#[js]</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token keyword">i64</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i64</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  n <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[no_mangle]</span>
<span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> <span class="token keyword">fn</span> <span class="token function-definition function">js_fib</span><span class="token punctuation">(</span>
  ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span>
  _this<span class="token punctuation">:</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
  argc<span class="token punctuation">:</span> c_int<span class="token punctuation">,</span>
  argv<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">JSValue</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_miss</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> fib_args_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> err<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">match</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_i64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> err<span class="token punctuation">,</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token namespace">js<span class="token punctuation">::</span></span><span class="token function">val</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token punctuation">::</span><span class="token punctuation">{</span><span class="token namespace">js<span class="token punctuation">::</span></span>arg<span class="token punctuation">,</span> <span class="token namespace">qjs<span class="token punctuation">::</span></span>run<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">async_io<span class="token punctuation">::</span></span><span class="token class-name">Timer</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">rust_macro<span class="token punctuation">::</span></span>js<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">os<span class="token punctuation">::</span>raw<span class="token punctuation">::</span></span>c_int<span class="token punctuation">,</span> <span class="token namespace">time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token attribute attr-name">#[js]</span>
<span class="token keyword">pub</span> <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">sleep</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Timer</span><span class="token punctuation">::</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[no_mangle]</span>
<span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> <span class="token keyword">fn</span> <span class="token function-definition function">js_sleep</span><span class="token punctuation">(</span>
  ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span>
  _this<span class="token punctuation">:</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
  argc<span class="token punctuation">:</span> c_int<span class="token punctuation">,</span>
  argv<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">JSValue</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_miss</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> sleep_args_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> err<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">match</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_i64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> err<span class="token punctuation">,</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">run</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span>
      <span class="token function">sleep</span><span class="token punctuation">(</span>n <span class="token keyword">as</span> <span class="token keyword">u64</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
      <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Som du kan se ovenfor, er alle de eksporterede funktioner defineret i mappen <code>./rust/src/export</code>. Denne mappe <code>mod.rs</code> genereres automatisk, n\xE5r <code>./rust/build.xsh</code> k\xF8res, og alle <code>.rs</code> -filer eksporteres under den.</p><h3 id="l\xE6sning-og-validering-af-indgaende-js-parametre" tabindex="-1"><a class="header-anchor" href="#l\xE6sning-og-validering-af-indgaende-js-parametre" aria-hidden="true">#</a> L\xE6sning og validering af indg\xE5ende js-parametre</h3><p>Parametrene l\xE6ses og valideres p\xE5 <code>src/js/arg.rs</code> med f\xF8lgende kode :</p><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>js<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> arg<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">rust_macro<span class="token punctuation">::</span></span>js<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>os<span class="token punctuation">::</span>raw<span class="token punctuation">::</span></span>c_int<span class="token punctuation">;</span>

<span class="token attribute attr-name">#[js]</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token keyword">i64</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i64</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  n <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[no_mangle]</span>
<span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> <span class="token keyword">fn</span> <span class="token function-definition function">js_fib</span><span class="token punctuation">(</span>
  ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span>
  _this<span class="token punctuation">:</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
  argc<span class="token punctuation">:</span> c_int<span class="token punctuation">,</span>
  argv<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">JSValue</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_miss</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> fib_args_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> err<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">match</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_i64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> err<span class="token punctuation">,</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token namespace">js<span class="token punctuation">::</span></span><span class="token function">val</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token punctuation">::</span><span class="token punctuation">{</span><span class="token namespace">js<span class="token punctuation">::</span></span>arg<span class="token punctuation">,</span> <span class="token namespace">qjs<span class="token punctuation">::</span></span>run<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">async_io<span class="token punctuation">::</span></span><span class="token class-name">Timer</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">rust_macro<span class="token punctuation">::</span></span>js<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">os<span class="token punctuation">::</span>raw<span class="token punctuation">::</span></span>c_int<span class="token punctuation">,</span> <span class="token namespace">time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token attribute attr-name">#[js]</span>
<span class="token keyword">pub</span> <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">sleep</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Timer</span><span class="token punctuation">::</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[no_mangle]</span>
<span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> <span class="token keyword">fn</span> <span class="token function-definition function">js_sleep</span><span class="token punctuation">(</span>
  ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span>
  _this<span class="token punctuation">:</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
  argc<span class="token punctuation">:</span> c_int<span class="token punctuation">,</span>
  argv<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">JSValue</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_miss</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> sleep_args_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> err<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">match</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_i64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> err<span class="token punctuation">,</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">run</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span>
      <span class="token function">sleep</span><span class="token punctuation">(</span>n <span class="token keyword">as</span> <span class="token keyword">u64</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
      <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>js<span class="token punctuation">::</span></span>throw<span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span> <span class="token class-name">JS_IsNumber</span><span class="token punctuation">,</span> <span class="token class-name">JS_ToInt64</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token class-name">MaybeUninit</span><span class="token punctuation">,</span> <span class="token namespace">os<span class="token punctuation">::</span>raw<span class="token punctuation">::</span></span>c_int<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">arg_miss</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span> argc<span class="token punctuation">:</span> c_int<span class="token punctuation">,</span> need<span class="token punctuation">:</span> c_int<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> argc <span class="token operator">&lt;</span> need <span class="token punctuation">{</span>
    <span class="token function">throw</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;miss : args need {need} pass {argc}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">arg_i64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span> argv<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span> pos<span class="token punctuation">:</span> <span class="token keyword">isize</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">i64</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token operator">*</span>argv<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token class-name">JS_IsNumber</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
      <span class="token function">throw</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;not number : args position {pos}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> n <span class="token operator">=</span> <span class="token class-name">MaybeUninit</span><span class="token punctuation">::</span><span class="token function">uninit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">JS_ToInt64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> n<span class="token punctuation">.</span><span class="token function">as_mut_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> _<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">assume_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>I \xF8jeblikket er det kun antallet af argumenter, der kontrolleres, og i64-typen l\xE6ses.</p>`,20),un=s("Du kan tilf\xF8je disse funktioner efter behov, se funktionerne i "),ln={href:"https://docs.rs/qjs-sys/0.1.2/qjs_sys/",target:"_blank",rel:"noopener noreferrer"},kn=s("qjs_sys"),rn=s(", der starter med "),dn=n("code",null,"JS_To",-1),mn=s("."),fn=p(`<h3 id="konvertering-af-datatyper-fra-rust-til-js" tabindex="-1"><a class="header-anchor" href="#konvertering-af-datatyper-fra-rust-til-js" aria-hidden="true">#</a> Konvertering af datatyper fra rust til js</h3><p>Typekonverteringen foretages p\xE5 <code>src/js/val.rs</code> med f\xF8lgende kode :</p><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>js<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> arg<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">rust_macro<span class="token punctuation">::</span></span>js<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>os<span class="token punctuation">::</span>raw<span class="token punctuation">::</span></span>c_int<span class="token punctuation">;</span>

<span class="token attribute attr-name">#[js]</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token keyword">i64</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i64</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  n <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[no_mangle]</span>
<span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> <span class="token keyword">fn</span> <span class="token function-definition function">js_fib</span><span class="token punctuation">(</span>
  ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span>
  _this<span class="token punctuation">:</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
  argc<span class="token punctuation">:</span> c_int<span class="token punctuation">,</span>
  argv<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">JSValue</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_miss</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> fib_args_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> err<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">match</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_i64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> err<span class="token punctuation">,</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token namespace">js<span class="token punctuation">::</span></span><span class="token function">val</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token punctuation">::</span><span class="token punctuation">{</span><span class="token namespace">js<span class="token punctuation">::</span></span>arg<span class="token punctuation">,</span> <span class="token namespace">qjs<span class="token punctuation">::</span></span>run<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">async_io<span class="token punctuation">::</span></span><span class="token class-name">Timer</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">rust_macro<span class="token punctuation">::</span></span>js<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">os<span class="token punctuation">::</span>raw<span class="token punctuation">::</span></span>c_int<span class="token punctuation">,</span> <span class="token namespace">time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token attribute attr-name">#[js]</span>
<span class="token keyword">pub</span> <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">sleep</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Timer</span><span class="token punctuation">::</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[no_mangle]</span>
<span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> <span class="token keyword">fn</span> <span class="token function-definition function">js_sleep</span><span class="token punctuation">(</span>
  ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span>
  _this<span class="token punctuation">:</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
  argc<span class="token punctuation">:</span> c_int<span class="token punctuation">,</span>
  argv<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">JSValue</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_miss</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> sleep_args_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> err<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">match</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_i64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> err<span class="token punctuation">,</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">run</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span>
      <span class="token function">sleep</span><span class="token punctuation">(</span>n <span class="token keyword">as</span> <span class="token keyword">u64</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
      <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>js<span class="token punctuation">::</span></span>throw<span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span> <span class="token class-name">JS_IsNumber</span><span class="token punctuation">,</span> <span class="token class-name">JS_ToInt64</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token class-name">MaybeUninit</span><span class="token punctuation">,</span> <span class="token namespace">os<span class="token punctuation">::</span>raw<span class="token punctuation">::</span></span>c_int<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">arg_miss</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span> argc<span class="token punctuation">:</span> c_int<span class="token punctuation">,</span> need<span class="token punctuation">:</span> c_int<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> argc <span class="token operator">&lt;</span> need <span class="token punctuation">{</span>
    <span class="token function">throw</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;miss : args need {need} pass {argc}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">arg_i64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span> argv<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span> pos<span class="token punctuation">:</span> <span class="token keyword">isize</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">i64</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token operator">*</span>argv<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token class-name">JS_IsNumber</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
      <span class="token function">throw</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;not number : args position {pos}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> n <span class="token operator">=</span> <span class="token class-name">MaybeUninit</span><span class="token punctuation">::</span><span class="token function">uninit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">JS_ToInt64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> n<span class="token punctuation">.</span><span class="token function">as_mut_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> _<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">assume_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span> <span class="token class-name">JS_NewInt64</span><span class="token punctuation">,</span> <span class="token class-name">JS_NewString</span><span class="token punctuation">,</span> <span class="token constant">JS_NULL</span><span class="token punctuation">,</span> <span class="token constant">JS_UNDEFINED</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>ffi<span class="token punctuation">::</span></span><span class="token class-name">CString</span><span class="token punctuation">;</span>

<span class="token keyword">pub</span> <span class="token keyword">enum</span> <span class="token type-definition class-name">Val</span> <span class="token punctuation">{</span>
  <span class="token class-name">None</span><span class="token punctuation">,</span>
  <span class="token class-name">Undefined</span><span class="token punctuation">,</span>
  <span class="token constant">I64</span><span class="token punctuation">(</span><span class="token keyword">i64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token class-name">CString</span><span class="token punctuation">(</span><span class="token class-name">CString</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">From</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token class-name">Val</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">from</span><span class="token punctuation">(</span>_<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token class-name">Undefined</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">From</span><span class="token operator">&lt;</span><span class="token keyword">i64</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token class-name">Val</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">from</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token keyword">i64</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token constant">I64</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">From</span><span class="token operator">&lt;</span><span class="token class-name">CString</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token class-name">Val</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">from</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token class-name">CString</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token class-name">CString</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">val</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span> t<span class="token punctuation">:</span> <span class="token keyword">impl</span> <span class="token class-name">Into</span><span class="token operator">&lt;</span><span class="token class-name">Val</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">JSValue</span> <span class="token punctuation">{</span>
  <span class="token keyword">match</span> t<span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token constant">JS_NULL</span><span class="token punctuation">,</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token class-name">Undefined</span> <span class="token operator">=&gt;</span> <span class="token constant">JS_UNDEFINED</span><span class="token punctuation">,</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token constant">I64</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token class-name">JS_NewInt64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token class-name">CString</span><span class="token punctuation">(</span>cstr<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token class-name">JS_NewString</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cstr<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Der er kun defineret fire typer til konvertering fra <code>None</code>, <code>()</code>, <code>i64</code>og CString til <code>js</code>. Du kan tilf\xF8je s\xE5 mange, som du vil.</p>`,4),_n=s("Flere datatyper kan deklareres i funktionerne i "),gn={href:"https://docs.rs/qjs-sys/0.1.2/qjs_sys/",target:"_blank",rel:"noopener noreferrer"},yn=s("qjs_sys"),wn=s(", der starter med "),hn=n("code",null,"JS_New",-1),bn=s("."),jn=n("h2",{id:"udviklingsmilj\xF8",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#udviklingsmilj\xF8","aria-hidden":"true"},"#"),s(" Udviklingsmilj\xF8")],-1),xn=n("p",null,"Jeg udvikler p\xE5 en Apple laptop, rust bruger 1.62.0-nightly.",-1),Sn=s("Installer f\xF8rst "),qn={href:"https://direnv.net",target:"_blank",rel:"noopener noreferrer"},Jn=s("direnv"),vn=s(", g\xE5 til mappen og "),Vn=n("code",null,"direnv allow",-1),Cn=s(" i et stykke tid"),En=p(`<p>Installer python3, og derefter <code>pip3 install -r ./requirements.txt</code></p><p>k\xF8re <code>./build.xsh</code> for at kompilere og k\xF8re demoen</p><p>Som standard vil det officielle quickjs-repositorium blive klonet, hvis du \xF8nsker at \xE6ndre quickjs i Kraken-repositoriet, skal du f\xF8rst</p><p><code>git clone --recursive git@github.com:openkraken/kraken.git --depth=1</code></p><p>s\xE5 g\xF8r f\xF8lgende</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">rm</span> -rf quickjs
<span class="token function">ln</span> -s <span class="token punctuation">..</span>/kraken/bridge/third_party/quickjs <span class="token builtin class-name">.</span>
</code></pre></div><p>Til sidst skal du genudf\xF8re <code>./build.xsh</code></p><h2 id="katalogstruktur" tabindex="-1"><a class="header-anchor" href="#katalogstruktur" aria-hidden="true">#</a> Katalogstruktur</h2>`,8),In=p("<li><p><code>./quickjs_rust</code><br> \xC6ndring af c-filen i quickjs-koden</p></li><li><p><code>./quickjs_ffi</code><br> Eksporter funktionerne fra <code>quickjs</code> headerfilen til <code>rust</code></p></li><li><p><code>./rust</code><br> Brug <code>rust</code> til at implementere funktionerne i <code>quickjs</code></p><ul><li><code>./rust/src/qjs.rs</code><br> Gennemf\xF8relse af asynkrone opkald. Da <code>quickjs</code> er single-threaded, skrives de funktionskald, der involverer <code>quckjs</code>, i hovedtr\xE5den.</li></ul></li>",3),Nn=n("p",null,[n("code",null,"./rust_macro"),n("br"),n("code",null,"rust"),s(" Gennemf\xF8relse af proceduremakroen "),n("code",null,"#[js]")],-1),Dn=s("I fremtiden kan du se "),Un={href:"https://github.com/second-state/wasmedge-quickjs/blob/70efe8520dc65636cb81b7225e2a6dae47cfad49/src/quickjs_sys/mod.rs#L122",target:"_blank",rel:"noopener noreferrer"},Tn=s("wasmedge-quickjs"),Fn=s(" for en automatisk eksport af rust-funktioner til js-funktioner. "),On={href:"https://github.com/second-state/wasmedge-quickjs/blob/70efe8520dc65636cb81b7225e2a6dae47cfad49/src/quickjs_sys/mod.rs#L122",target:"_blank",rel:"noopener noreferrer"},Ln=s("wasmedge-quickjs \u2192 JsFunctionTrampoline"),Rn=p(`<h2 id="opbygning-af-scripts-build-xsh" tabindex="-1"><a class="header-anchor" href="#opbygning-af-scripts-build-xsh" aria-hidden="true">#</a> Opbygning af scripts <code>build.xsh</code></h2><p>Lad os uden videre g\xE5 direkte til kildekoden til <code>build.xsh</code> build-scriptet</p><div class="language-xonsh ext-xonsh"><pre class="language-xonsh"><code>#!/usr/bin/env xonsh

from pathlib import Path
from os.path import dirname,abspath,exists,join
PWD = dirname(abspath(__file__))
cd @(PWD)

p&quot;.xonshrc&quot;.exists() &amp;&amp; source .xonshrc

quickjs = &#39;quickjs&#39;

if not exists(quickjs):
  git clone git@github.com:bellard/@(quickjs).git --depth=1

./quickjs_rust/patch.py

./rust/build.xsh
./quickjs_rust/gen.py

def ln_s(li):
  for arg in li.split(&#39; &#39;):
    fp = join(quickjs,arg)
    if not exists(fp):
      ln -s @(PWD)/@(arg) @(fp)

ln_s(&#39;quickjs_rust rust quickjs_ffi rust_macro&#39;)

cd @(quickjs)
make qjs

cd @(PWD)
./quickjs/qjs --unhandled-rejection -m test.js 2&gt;&amp;1 | tee test.js.out
</code></pre></div><h2 id="forklaring-af-princippet" tabindex="-1"><a class="header-anchor" href="#forklaring-af-princippet" aria-hidden="true">#</a> Forklaring af princippet</h2><h3 id="quickjs-rust-patch-py" tabindex="-1"><a class="header-anchor" href="#quickjs-rust-patch-py" aria-hidden="true">#</a> <code>quickjs_rust/patch.py</code></h3><p>Hvis du k\xF8rer <code>./quickjs_rust/patch.py</code>, vil der blive foretaget nogle mindre \xE6ndringer i kildekoden til <code>quickjs</code>.</p><p>En af funktionerne <code>JS_AddRust</code> bruges til at injicere i rustmodulet.</p><p><code>rust_run</code> er indspr\xF8jtet i <code>JS_ExecutePendingJob</code> for at kalde asynkrone funktioner.</p><p>Et sk\xE6rmbillede af alle \xE6ndringerne vises nedenfor :</p><p><img src="//irmw.gumlet.io/ep2Xgg.png" alt=""></p><h3 id="quickjs-rust-h" tabindex="-1"><a class="header-anchor" href="#quickjs-rust-h" aria-hidden="true">#</a> <code>quickjs_rust.h</code></h3><p>Af ovenst\xE5ende \xE6ndringer kan du se, at vi har indf\xF8rt en ny header-fil <code>quickjs_rust.h</code> med f\xF8lgende kode</p><div class="language-c ext-c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">QUICKJS_RUST_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">QUICKJS_RUST_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;../quickjs/quickjs.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;../rust/rust.h&quot;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">countof</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">JS_RUSTFUNC_DEF</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token function">JS_CFUNC_DEF</span><span class="token punctuation">(</span>#name<span class="token punctuation">,</span> name</span><span class="token punctuation">##</span><span class="token expression">_args_len<span class="token punctuation">,</span> js_</span><span class="token punctuation">##</span><span class="token expression">name<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;./js_rust_funcs.h&quot;</span></span>

<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> js_rust_funcs_count <span class="token operator">=</span> <span class="token function">countof</span><span class="token punctuation">(</span>js_rust_funcs<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">int</span>
<span class="token function">js_rust_init</span><span class="token punctuation">(</span>JSContext<span class="token operator">*</span> ctx<span class="token punctuation">,</span> JSModuleDef<span class="token operator">*</span> m<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">JS_SetModuleExportList</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> m<span class="token punctuation">,</span> js_rust_funcs<span class="token punctuation">,</span>
      js_rust_funcs_count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">JS_INIT_MODULE</span> <span class="token expression">js_init_module_rust</span></span>

JSModuleDef<span class="token operator">*</span> <span class="token function">JS_INIT_MODULE</span><span class="token punctuation">(</span>JSContext<span class="token operator">*</span> ctx<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> module_name<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  JSModuleDef<span class="token operator">*</span> m<span class="token punctuation">;</span>
  m <span class="token operator">=</span> <span class="token function">JS_NewCModule</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> module_name<span class="token punctuation">,</span> js_rust_init<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
  <span class="token function">js_rust_init</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> m<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">JS_AddRust</span><span class="token punctuation">(</span>JSContext<span class="token operator">*</span> ctx<span class="token punctuation">,</span> JSRuntime<span class="token operator">*</span> rt<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  JSModuleDef<span class="token operator">*</span> m <span class="token operator">=</span> <span class="token function">JS_INIT_MODULE</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">&quot;rust&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> js_rust_funcs_count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">JS_AddModuleExport</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> m<span class="token punctuation">,</span> js_rust_funcs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">rust_init</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> rt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre></div><h3 id="rust-rust-h" tabindex="-1"><a class="header-anchor" href="#rust-rust-h" aria-hidden="true">#</a> <code>rust/rust.h</code></h3><p>Du kan se, at <code>quickjs_rust/quickjs_rust.h</code> introducerer <code>quickjs_rust/js_rust_funcs.h</code>, som automatisk genereres fra rust-eksportfunktionens headerfil <code>rust/rust.h</code> og ikke b\xF8r \xE6ndres i h\xE5nden.</p><p>Og <code>rust/rust.h</code> genereres ved at kalde cbindgen fra <code>./rust/build.xsh</code>.</p><h3 id="rust-build-xsh" tabindex="-1"><a class="header-anchor" href="#rust-build-xsh" aria-hidden="true">#</a> <code>rust/build.xsh</code></h3><div class="language-xonsh ext-xonsh"><pre class="language-xonsh"><code>#!/usr/bin/env xonsh

from os.path import dirname,abspath
import platform
PWD = dirname(abspath(__file__))
cd @(PWD)

p&quot;../.xonshrc&quot;.exists() &amp;&amp; source ../.xonshrc

./src/export/mod.gen.py

system = platform.system().lower()
if system == &#39;darwin&#39;:
  system = f&#39;apple-{system}&#39;

TARGET=f&#39;{platform.machine()}-{system}&#39;

def cbindgen():
  cbindgen -q --config cbindgen.toml --crate rust --output rust.h

try:
  cbindgen()
except:
  cargo clean
  cbindgen()

cargo build \\
--release \\
-Z build-std=std,panic_abort \\
-Z build-std-features=panic_immediate_abort \\
--target @(TARGET)

mv ./target/@(TARGET)/release/librust.a ./target/release
</code></pre></div><h2 id="udviklingsproblemer-memo" tabindex="-1"><a class="header-anchor" href="#udviklingsproblemer-memo" aria-hidden="true">#</a> Udviklingsproblemer : Memo</h2><h3 id="quickjs-ffi" tabindex="-1"><a class="header-anchor" href="#quickjs-ffi" aria-hidden="true">#</a> <code>quickjs_ffi</code></h3>`,20),Mn=s("Kode fra "),An={href:"https://raw.githubusercontent.com/taskie/quijine/main/quijine_core/src/ffi.rs",target:"_blank",rel:"noopener noreferrer"},Kn=s("quijine/main/quijine_core/src/ffi.rs"),Bn=p(`<p>med nogle mindre \xE6ndringer, idet den erstatter</p><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>js<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> arg<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">rust_macro<span class="token punctuation">::</span></span>js<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>os<span class="token punctuation">::</span>raw<span class="token punctuation">::</span></span>c_int<span class="token punctuation">;</span>

<span class="token attribute attr-name">#[js]</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token keyword">i64</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i64</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  n <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[no_mangle]</span>
<span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> <span class="token keyword">fn</span> <span class="token function-definition function">js_fib</span><span class="token punctuation">(</span>
  ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span>
  _this<span class="token punctuation">:</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
  argc<span class="token punctuation">:</span> c_int<span class="token punctuation">,</span>
  argv<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">JSValue</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_miss</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> fib_args_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> err<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">match</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_i64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> err<span class="token punctuation">,</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token namespace">js<span class="token punctuation">::</span></span><span class="token function">val</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token punctuation">::</span><span class="token punctuation">{</span><span class="token namespace">js<span class="token punctuation">::</span></span>arg<span class="token punctuation">,</span> <span class="token namespace">qjs<span class="token punctuation">::</span></span>run<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">async_io<span class="token punctuation">::</span></span><span class="token class-name">Timer</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">rust_macro<span class="token punctuation">::</span></span>js<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">os<span class="token punctuation">::</span>raw<span class="token punctuation">::</span></span>c_int<span class="token punctuation">,</span> <span class="token namespace">time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token attribute attr-name">#[js]</span>
<span class="token keyword">pub</span> <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">sleep</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Timer</span><span class="token punctuation">::</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[no_mangle]</span>
<span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> <span class="token keyword">fn</span> <span class="token function-definition function">js_sleep</span><span class="token punctuation">(</span>
  ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span>
  _this<span class="token punctuation">:</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
  argc<span class="token punctuation">:</span> c_int<span class="token punctuation">,</span>
  argv<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">JSValue</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_miss</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> sleep_args_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> err<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">match</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_i64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> err<span class="token punctuation">,</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">run</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span>
      <span class="token function">sleep</span><span class="token punctuation">(</span>n <span class="token keyword">as</span> <span class="token keyword">u64</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
      <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>js<span class="token punctuation">::</span></span>throw<span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span> <span class="token class-name">JS_IsNumber</span><span class="token punctuation">,</span> <span class="token class-name">JS_ToInt64</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token class-name">MaybeUninit</span><span class="token punctuation">,</span> <span class="token namespace">os<span class="token punctuation">::</span>raw<span class="token punctuation">::</span></span>c_int<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">arg_miss</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span> argc<span class="token punctuation">:</span> c_int<span class="token punctuation">,</span> need<span class="token punctuation">:</span> c_int<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> argc <span class="token operator">&lt;</span> need <span class="token punctuation">{</span>
    <span class="token function">throw</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;miss : args need {need} pass {argc}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">arg_i64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span> argv<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span> pos<span class="token punctuation">:</span> <span class="token keyword">isize</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">i64</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token operator">*</span>argv<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token class-name">JS_IsNumber</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
      <span class="token function">throw</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;not number : args position {pos}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> n <span class="token operator">=</span> <span class="token class-name">MaybeUninit</span><span class="token punctuation">::</span><span class="token function">uninit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">JS_ToInt64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> n<span class="token punctuation">.</span><span class="token function">as_mut_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> _<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">assume_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span> <span class="token class-name">JS_NewInt64</span><span class="token punctuation">,</span> <span class="token class-name">JS_NewString</span><span class="token punctuation">,</span> <span class="token constant">JS_NULL</span><span class="token punctuation">,</span> <span class="token constant">JS_UNDEFINED</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>ffi<span class="token punctuation">::</span></span><span class="token class-name">CString</span><span class="token punctuation">;</span>

<span class="token keyword">pub</span> <span class="token keyword">enum</span> <span class="token type-definition class-name">Val</span> <span class="token punctuation">{</span>
  <span class="token class-name">None</span><span class="token punctuation">,</span>
  <span class="token class-name">Undefined</span><span class="token punctuation">,</span>
  <span class="token constant">I64</span><span class="token punctuation">(</span><span class="token keyword">i64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token class-name">CString</span><span class="token punctuation">(</span><span class="token class-name">CString</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">From</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token class-name">Val</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">from</span><span class="token punctuation">(</span>_<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token class-name">Undefined</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">From</span><span class="token operator">&lt;</span><span class="token keyword">i64</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token class-name">Val</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">from</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token keyword">i64</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token constant">I64</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">From</span><span class="token operator">&lt;</span><span class="token class-name">CString</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token class-name">Val</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">from</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token class-name">CString</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token class-name">CString</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">val</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span> t<span class="token punctuation">:</span> <span class="token keyword">impl</span> <span class="token class-name">Into</span><span class="token operator">&lt;</span><span class="token class-name">Val</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">JSValue</span> <span class="token punctuation">{</span>
  <span class="token keyword">match</span> t<span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token constant">JS_NULL</span><span class="token punctuation">,</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token class-name">Undefined</span> <span class="token operator">=&gt;</span> <span class="token constant">JS_UNDEFINED</span><span class="token punctuation">,</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token constant">I64</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token class-name">JS_NewInt64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token class-name">CString</span><span class="token punctuation">(</span>cstr<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token class-name">JS_NewString</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cstr<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">pub</span> <span class="token keyword">use</span> <span class="token namespace">libquickjs_sys<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
</code></pre></div><p>til</p><div class="language-rust ext-rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>js<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token keyword">self</span><span class="token punctuation">,</span> arg<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">rust_macro<span class="token punctuation">::</span></span>js<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>os<span class="token punctuation">::</span>raw<span class="token punctuation">::</span></span>c_int<span class="token punctuation">;</span>

<span class="token attribute attr-name">#[js]</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token keyword">i64</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i64</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  n <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[no_mangle]</span>
<span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> <span class="token keyword">fn</span> <span class="token function-definition function">js_fib</span><span class="token punctuation">(</span>
  ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span>
  _this<span class="token punctuation">:</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
  argc<span class="token punctuation">:</span> c_int<span class="token punctuation">,</span>
  argv<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">JSValue</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_miss</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> fib_args_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> err<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">match</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_i64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> err<span class="token punctuation">,</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token namespace">js<span class="token punctuation">::</span></span><span class="token function">val</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token punctuation">::</span><span class="token punctuation">{</span><span class="token namespace">js<span class="token punctuation">::</span></span>arg<span class="token punctuation">,</span> <span class="token namespace">qjs<span class="token punctuation">::</span></span>run<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">async_io<span class="token punctuation">::</span></span><span class="token class-name">Timer</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">rust_macro<span class="token punctuation">::</span></span>js<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">os<span class="token punctuation">::</span>raw<span class="token punctuation">::</span></span>c_int<span class="token punctuation">,</span> <span class="token namespace">time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token attribute attr-name">#[js]</span>
<span class="token keyword">pub</span> <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">sleep</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Timer</span><span class="token punctuation">::</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[no_mangle]</span>
<span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> <span class="token keyword">fn</span> <span class="token function-definition function">js_sleep</span><span class="token punctuation">(</span>
  ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span>
  _this<span class="token punctuation">:</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
  argc<span class="token punctuation">:</span> c_int<span class="token punctuation">,</span>
  argv<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">JSValue</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_miss</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> sleep_args_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> err<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">match</span> <span class="token namespace">arg<span class="token punctuation">::</span></span><span class="token function">arg_i64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> err<span class="token punctuation">,</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">run</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">move</span> <span class="token punctuation">{</span>
      <span class="token function">sleep</span><span class="token punctuation">(</span>n <span class="token keyword">as</span> <span class="token keyword">u64</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
      <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>js<span class="token punctuation">::</span></span>throw<span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span> <span class="token class-name">JS_IsNumber</span><span class="token punctuation">,</span> <span class="token class-name">JS_ToInt64</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token namespace">mem<span class="token punctuation">::</span></span><span class="token class-name">MaybeUninit</span><span class="token punctuation">,</span> <span class="token namespace">os<span class="token punctuation">::</span>raw<span class="token punctuation">::</span></span>c_int<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">arg_miss</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span> argc<span class="token punctuation">:</span> c_int<span class="token punctuation">,</span> need<span class="token punctuation">:</span> c_int<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> argc <span class="token operator">&lt;</span> need <span class="token punctuation">{</span>
    <span class="token function">throw</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;miss : args need {need} pass {argc}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">arg_i64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span> argv<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span> pos<span class="token punctuation">:</span> <span class="token keyword">isize</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">i64</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">unsafe</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token operator">*</span>argv<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token class-name">JS_IsNumber</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
      <span class="token function">throw</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;not number : args position {pos}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> n <span class="token operator">=</span> <span class="token class-name">MaybeUninit</span><span class="token punctuation">::</span><span class="token function">uninit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">JS_ToInt64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> n<span class="token punctuation">.</span><span class="token function">as_mut_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> _<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">assume_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">use</span> <span class="token namespace">quickjs_ffi<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">JSContext</span><span class="token punctuation">,</span> <span class="token class-name">JSValue</span><span class="token punctuation">,</span> <span class="token class-name">JS_NewInt64</span><span class="token punctuation">,</span> <span class="token class-name">JS_NewString</span><span class="token punctuation">,</span> <span class="token constant">JS_NULL</span><span class="token punctuation">,</span> <span class="token constant">JS_UNDEFINED</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>ffi<span class="token punctuation">::</span></span><span class="token class-name">CString</span><span class="token punctuation">;</span>

<span class="token keyword">pub</span> <span class="token keyword">enum</span> <span class="token type-definition class-name">Val</span> <span class="token punctuation">{</span>
  <span class="token class-name">None</span><span class="token punctuation">,</span>
  <span class="token class-name">Undefined</span><span class="token punctuation">,</span>
  <span class="token constant">I64</span><span class="token punctuation">(</span><span class="token keyword">i64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token class-name">CString</span><span class="token punctuation">(</span><span class="token class-name">CString</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">From</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token class-name">Val</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">from</span><span class="token punctuation">(</span>_<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token class-name">Undefined</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">From</span><span class="token operator">&lt;</span><span class="token keyword">i64</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token class-name">Val</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">from</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token keyword">i64</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token constant">I64</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">impl</span> <span class="token class-name">From</span><span class="token operator">&lt;</span><span class="token class-name">CString</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> <span class="token class-name">Val</span> <span class="token punctuation">{</span>
  <span class="token keyword">fn</span> <span class="token function-definition function">from</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token class-name">CString</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token class-name">CString</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">crate</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">val</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">mut</span> <span class="token class-name">JSContext</span><span class="token punctuation">,</span> t<span class="token punctuation">:</span> <span class="token keyword">impl</span> <span class="token class-name">Into</span><span class="token operator">&lt;</span><span class="token class-name">Val</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">JSValue</span> <span class="token punctuation">{</span>
  <span class="token keyword">match</span> t<span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token constant">JS_NULL</span><span class="token punctuation">,</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token class-name">Undefined</span> <span class="token operator">=&gt;</span> <span class="token constant">JS_UNDEFINED</span><span class="token punctuation">,</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token constant">I64</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token class-name">JS_NewInt64</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token class-name">Val</span><span class="token punctuation">::</span><span class="token class-name">CString</span><span class="token punctuation">(</span>cstr<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">unsafe</span> <span class="token punctuation">{</span> <span class="token class-name">JS_NewString</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cstr<span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">pub</span> <span class="token keyword">use</span> <span class="token namespace">libquickjs_sys<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token attribute attr-name">#![allow(non_upper_case_globals)]</span>
<span class="token attribute attr-name">#![allow(non_camel_case_types)]</span>
<span class="token attribute attr-name">#![allow(non_snake_case)]</span>

<span class="token macro property">include!</span><span class="token punctuation">(</span><span class="token macro property">concat!</span><span class="token punctuation">(</span><span class="token macro property">env!</span><span class="token punctuation">(</span><span class="token string">&quot;OUT_DIR&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;/c.rs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="undefined-symbols-for-architecture-x86-64-js-toint32" tabindex="-1"><a class="header-anchor" href="#undefined-symbols-for-architecture-x86-64-js-toint32" aria-hidden="true">#</a> <code>Undefined symbols for architecture x86_64: &quot;_JS_ToInt32&quot;</code></h3><p>\xC6ndre &quot;. /rust/Cargo.toml&quot; som f\xF8lger, idet kun staticlib&#39;en bevares</p><div class="language-toml ext-toml"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">lib</span><span class="token punctuation">]</span>
<span class="token comment">#crate-type = [&quot;lib&quot;, &quot;cdylib&quot;, &quot;staticlib&quot;]</span>
<span class="token key property">crate-type</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;staticlib&quot;</span><span class="token punctuation">]</span>
</code></pre></div><h2 id="referencer" tabindex="-1"><a class="header-anchor" href="#referencer" aria-hidden="true">#</a> Referencer</h2>`,8),Pn={start:"0"},zn=s("Fra "),Qn=n("code",null,"JS",-1),Wn=s(" -motoren til "),Gn=n("code",null,"JS",-1),Hn=s(" runtime "),Xn={href:"https://github.com/doodlewind/blog/blob/master/source/_posts/js-engine-to-js-runtime-1.md",target:"_blank",rel:"noopener noreferrer"},Zn=s("(\xF8verst)"),Yn=s(),$n={href:"https://github.com/doodlewind/blog/blob/master/source/_posts/js-engine-to-js-runtime-2.md",target:"_blank",rel:"noopener noreferrer"},ns=s("(nederst)"),ss={href:"https://github.com/quickjs-zh/QuickJS/wiki/%E4%BD%BF%E7%94%A8C%E8%AF%AD%E8%A8%80%E4%B8%BAQuickJS%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97",target:"_blank",rel:"noopener noreferrer"},as=s("Udvikling af et indf\xF8dt modul til "),ts=n("code",null,"QuickJS",-1),ps=s(" i C"),os={href:"https://wasmedge.org/book/en/dev/js/rust.html",target:"_blank",rel:"noopener noreferrer"},es=s("Brug Rust til at implementere JS API"),cs={href:"https://github.com/Kozova1/quickjs-example",target:"_blank",rel:"noopener noreferrer"},us=s("QuickJS eksempler"),ls={href:"https://rust-lang.github.io/rust-bindgen/",target:"_blank",rel:"noopener noreferrer"},ks=s("rust-bindgen"),is={href:"https://calbertts.medium.com/how-to-create-asynchronous-apis-for-quickjs-8aca5488bb2e",target:"_blank",rel:"noopener noreferrer"},rs=s("S\xE5dan oprettes asynkron kode til "),ds=n("code",null,"QuickJS",-1),ms={href:"https://github.com/DelSkayn/rquickjs/blob/master/core/src/context/ctx.rs#L104",target:"_blank",rel:"noopener noreferrer"},fs=s("rquickjs \u2192 JS_NewPromiseCapability"),_s={href:"https://github.com/second-state/wasmedge-quickjs/blob/8a65582265ecdd3171380feebf56b3bb8c34d183/src/quickjs_sys/mod.rs#L515",target:"_blank",rel:"noopener noreferrer"},gs=s("wasmedge-quickjs \u2192 new_promise"),ys={href:"https://github.com/second-state/wasmedge-quickjs/blob/da887752fdc9c36aca0f4b7499c5b115862ce771/src/internal_module/wasi_net_module.rs#L46",target:"_blank",rel:"noopener noreferrer"},ws=s("wasmedge-quickjs \u2192 JsMethod"),hs={href:"https://github.com/second-state/wasmedge-quickjs/blob/8a65582265ecdd3171380feebf56b3bb8c34d183/src/quickjs_sys/mod.rs#L756",target:"_blank",rel:"noopener noreferrer"},bs=s("wasmedge-quickjs \u2192 opkald"),js={href:"https://mp.weixin.qq.com/s/BKto24ItwXbeHon_LaF_0w",target:"_blank",rel:"noopener noreferrer"},xs=s("Den um\xE6rkelige f\xE6lde - l\xE5ser i Rust"),Ss=n("h2",{id:"om",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#om","aria-hidden":"true"},"#"),s(" Om")],-1),qs=s("Dette projekt er en del af kodeprojektet "),Js=s("rmw.link ( "),vs={href:"//rmw.link",target:"_blank",rel:"noopener noreferrer"},Vs=s("rmw.link"),Cs=s(" )."),Es=n("p",null,[n("img",{src:"https://raw.githubusercontent.com/rmw-link/logo/master/rmw.red.bg.svg",alt:"rmw.link"})],-1);function Is(Ns,Ds){const a=e("ExternalLinkIcon");return c(),u(l,null,[i,r,n("ul",null,[n("li",null,[n("a",d,[m,t(a)])]),n("li",null,[n("a",f,[_,t(a)])]),n("li",null,[n("a",g,[y,t(a)])])]),w,n("p",null,[n("a",h,[b,t(a)]),j,x,S,n("a",q,[J,t(a)]),v]),V,n("p",null,[C,n("a",E,[I,N,t(a)]),D]),n("p",null,[U,n("a",T,[F,t(a)]),O,L,R,M,A]),K,n("p",null,[B,P,z,n("a",Q,[W,t(a)]),G,H,X,Z,Y,$,nn,sn,an,tn,pn,on,en]),cn,n("p",null,[un,n("a",ln,[kn,t(a)]),rn,dn,mn]),fn,n("p",null,[_n,n("a",gn,[yn,t(a)]),wn,hn,bn]),jn,xn,n("p",null,[Sn,n("a",qn,[Jn,t(a)]),vn,Vn,Cn]),En,n("ul",null,[In,n("li",null,[Nn,n("p",null,[Dn,n("a",Un,[Tn,t(a)]),Fn,n("a",On,[Ln,t(a)])])])]),Rn,n("p",null,[Mn,n("a",An,[Kn,t(a)])]),Bn,n("ol",Pn,[n("li",null,[zn,Qn,Wn,Gn,Hn,n("a",Xn,[Zn,t(a)]),Yn,n("a",$n,[ns,t(a)])]),n("li",null,[n("a",ss,[as,ts,ps,t(a)])]),n("li",null,[n("a",os,[es,t(a)])]),n("li",null,[n("a",cs,[us,t(a)])]),n("li",null,[n("a",ls,[ks,t(a)])]),n("li",null,[n("a",is,[rs,ds,t(a)])]),n("li",null,[n("a",ms,[fs,t(a)])]),n("li",null,[n("a",_s,[gs,t(a)])]),n("li",null,[n("a",ys,[ws,t(a)])]),n("li",null,[n("a",hs,[bs,t(a)])]),n("li",null,[n("a",js,[xs,t(a)])])]),Ss,n("p",null,[qs,n("strong",null,[Js,n("a",vs,[Vs,t(a)])]),Cs]),Es],64)}var Ts=o(k,[["render",Is],["__file","2022-04-29-quickjs-rust.html.vue"]]);export{Ts as default};
